장고는 파이썬으로 만들어진 웹 프레임워크
- 웹 프레임워크: 웹 프로그램을 만들기 위한 스타터 키드, 웹 프로그램을 위해 만들어야 할 기능이 이미 만들어져 있음

장고를 사용하면 보안 공격에 대한 코드를 짤 필요가 없다
- 보안 공격을 기본적으로 잘 막아 준다, 튼튼한 웹 프레임워크
- SQL 인젝션[악의적인 SQL 주입해 공격], XSS[자바스크립트 삽입해 공격], CSRF[위조된 요청 보내 공격], 클랙재킹[사용자의 의도하지 않은 클릭 유도]

장고를 파이썬 가상 환경에 설치하자
- 파이썬 프로젝트를 진행할 때 독립된 환경을 만들어 주는 고마운 도구
- 하나의 PC 안에 독립된 가상 환경을 여러 개 만들 수 있다
-- 하나의 PC에 서로 다른 버전의 파이썬과 라이브러리를 쉽게 설치해 사용할 수 있다

cd \ - mkdir venvs - cd venvs - python -m venv mysite
: 파이썬 모듈 중 venv라는 모듈 사용, 그 뒤에 생성할 가상 환경 이름(mysite)
-- C:/venvs 디렉터리 아래 mysite 디렉터리 생성된다, 이 디렉터리를 가상 환경이라 생각
- 그러나 바로 사용할 수 없다, 가상 환경 진입 필요 
-> 생성한 mysite 가상 환경에 있는 Scripts 디렉터리의 activate 수행: cd ..\Scripts 후 activate하면 (mysite) <- 진입한 가상 환경
-- 벗어나려면 deactivate, (mysite) 프롬프트 사라짐

가상 환경에 장고 설치(activate)

장고의 프로젝트는 하나의 웹 사이트 = 장고 프로젝트 생성하면 한 개의 웹사이트 생성과 동일
- 프로젝트 안에는 여러 개의 앱 존재, 앱들이 모여 웹사이트 구성, 앱이란 장고가 기본적으로 제공하는 앱 + 개발자가 만든 앱
-- 장고의 앱은 프로젝트를 구성하는 작은 단위의 기능

장고 프로젝트는 여러 개가 될 수 있으므로 프로젝트 모아 둘 루트 디렉터리 생성 필수(django_projects)

django-admin startproject config . 명령으로 장고 프로젝트를 생성 <- (mysite) 에서 mysite dir 생성 후, cd
: 현재 디렉터리 mysite 기준으로 프로젝트 생성, 프로젝트 생성되면 mysite 디렉터리 밑에는 장고가 필요로 하는 여러 디렉터리와 파일 생성됨
-- 디렉터리 생성 안하고 django-admin startproject mysite 로 프로젝트 생성도 가능.

mysite 구동: python manage.py runserver
- 개발을 위해 실행되는 장고 서버는 로컬호스트(localhost)로 실행되기 때문에 로컬 서버라고 부른다
- http://127.0.0.1:8000/ 대신 http://localhost:8000/ 라고 입력해도 동일한 결과를 볼 수 있다.

가상 환경 간단히 진입 위해 mysite.cmd 파일을 노트패드와 같은 에디터로 작성: https://wikidocs.net/72377
- 환경 변수 PATH에 C:\venvs 디렉터리가 추가되어 mysite.cmd 명령을 어디서든 실행할 수 있다. 
- mysite만 입력하면 바로 가상 환경으로 진입

장고의 설정값이 들어 있는 settings.py
+ urls.py 파일을 이용해 URL과 매핑되는 뷰 함수를 관리 / 장고 ORM을 이용해 데이터베이스를 제어 etc

프로젝트에 기능을 추가하기 위해서는 앱을 생성해야 한다 - 게시판 기능을 담당할 pybo 앱을 생성
: django-admin startapp pybo-> pybo 앱 관련한 파일과 디렉터리가 생성되었음

404 오류는 브라우저가 요청한 페이지를 찾을 수 없을 경우에 발생한다.
장고의 urls.py 파일은 페이지 요청이 발생하면 가장 먼저 호출되는 파일로 URL과 뷰 함수 간의 매핑을 정의한다. 
뷰 함수는 views.py 파일에 정의된 함수를 말한다.
- views.index는 views.py 파일의 index 함수를 의미

urlpatterns에서 실제 URL은 http://localhost:8000/pybo 이지만 호스트명과 포트가 생략된 pybo/로 매핑해야 한다. 
- 호스트(예:localhost)와 포트(예:8000)는 서버가 어떤 환경에서 실행되는지에 따라 변하기 때문
- 슬래시를 붙여주면 브라우저 주소창에 자동으로 변환된다
-- 장고는 URL을 정규화한다

HttpResponse는 요청에 대한 응답을 할때 사용한다. 
[1] 브라우저에서 로컬 서버로 http://localhost:8000/pybo 페이지를 요청하면
[2] urls.py 파일에서 /pybo URL 매핑을 확인하여 views.py 파일의 index 함수를 호출하고
[3] 호출한 결과를 브라우저에 반영한다.

pybo 앱에 관련한 것들은 pybo 앱 디렉터리 하위에 위치해야 한다
config의 urls.py 파일은 앱이 아닌 프로젝트 성격의 파일이므로 이곳에는 프로젝트 성격의 URL 매핑만 추가되어야 한다.
 
장고는 모델 이용하여 데이터베이스 처리
- 장고의 모델(Model)을 사용하면 SQL 쿼리문의 도움없이 데이터를 쉽게 처리
- 데이터베이스가 필요한 앱만 migrate 필요

BASE_DIR은 프로젝트 디렉터리를 의미
SQLite는 주로 개발용이나 소규모 프로젝트에서 사용되는 가벼운 파일 기반의 데이터베이스
- migrate를 수행하면 admin, auth, contenttypes, sessions 앱들이 사용하는 테이블들이 생성된다. [python manage.py migrate]
- 장고의 장점 중 하나는 테이블 작업을 위해 직접 쿼리문을 수행하지 않아도 된다는 점이다. 
-- 장고의 ORM(Object Relational Mapping)을 사용하면 쿼리문을 몰라도 데이터 작업을 쉽게 할 수 있다.

파이보는 질문과 답변을 할 수 있는 파이썬 게시판 서비스이다. 
따라서 파이보에는 질문과 답변에 해당하는 데이터 모델이 있어야 한다.
- 제목처럼 글자수의 길이가 제한된 텍스트는 CharField를 사용
- 내용(content)처럼 글자수를 제한할 수 없는 텍스트는 위처럼 TextField를 사용
- 작성일시처럼 날짜와 시간에 관계된 속성은 DateTimeField를 사용
- 기존 모델을 속성으로 연결하려면 ForeignKey를 사용, ForeignKey는 다른 모델과 연결하기 위해 사용한다.
-- 테이블 생성을 위해 가장 먼저 해야 할 일은 pybo 앱을 config/settings.py 파일의 INSTALLED_APPS 항목에 추가하는 일이다.

테이블 생성 위해 python manage.py makemigrations 후 migrate
- 수행하더라도 실제로 테이블이 생성되지는 않는다.
- 장고가 테이블 작업을 수행하기 위한 작업 파일(예: 0001_initial.py)을 생성하는 명령어
- 실제 테이블 작업은 migrate 명령을 통해서만 가능
- 모델이 신규로 생성되거나 변경되면 makemigrations 명령을 먼저 수행한 후에 migrate 명령을 수행
- 어떤 쿼리문이 실행되는지 조회, 쿼리 수행 X: sqlmigrate

모델 사용 - 장고 shell: python manage.py shell
-  장고 셸은 장고에 필요한 환경들이 자동으로 설정되어 실행된다.
- 장고 셸을 종료하기 위해서는 장고 셸에서 Ctrl+Z 또는 quit()을 입력하면 된다.

Question과 Answer 모델은 장고 셸에서 import하여 사용할 수 있다.
- id는 모델 데이터의 유일한 값으로 프라이머리 키(PK:Primary Key)라고도 한다. 이 id 값은 데이터를 생성할 때마다 1씩 증가된다.
- 저장한 Question 모델의 데이터는 Question.objects 를 통해서 조회할 수 있다. 

모델에 메서드가 추가될 경우에는 makemigrations와 migrate를 수행할 필요가 없다. 
makemigrations, migrate 명령이 필요한 경우는 모델의 속성이 변경되었을때 뿐이다.

filter는 조건에 해당되는 데이터를 모두 리턴해 주기 때문에 다건을 의미하는 QuerySet이 리턴된다.
- subject__contains='장고'의 의미는 "subject에 '장고'라는 문자열이 포함되어 있는가?" 라고 해석할 수 있다. 
- id는 유일한 값이므로 filter 대신 get을 이용하여 조회할 수도 있다.
- get으로 조회할 경우 QuerySet이 아닌 Question 모델 객체가 리턴되었다. filter는 다건을 리턴하지만 get은 한건만 리턴하기 때문이다.
- 답변 데이터를 만들기 위해서는 질문이 필요하므로 id가 2인 질문을 먼저 조회한 후 question 속성에 대입해 주었다.
- q.answer_set을 사용하면 질문에 연결된 답변을 가져올 수 있다. [연결모델명_set]

장고 관리자를 사용하기 위해서는 장고 관리자 화면에 접속할 수 있는 슈퍼유저(superuser)를 먼저 생성해야 한다.
- python manage.py createsuperuser 명령으로 슈퍼유저를 생성, http://localhost:8000/admin/
- admin.site.register로 모델을 등록

render 함수는 파이썬 데이터를 템플릿에 적용하여 HTML로 반환하는 함수
템플릿 파일은 HTML 파일과 비슷하지만 파이썬 데이터를 읽어서 사용할수 있는 HTML 파일
- 템플릿을 저장할 디렉터리는 config/settings.py 파일의 TEMPLATES 항목에 설정
- {% 와 %} 로 둘러싸인 문장을 템플릿 태그

[HTTP 주요 응답코드의 종류]
오류코드	설명
200		성공 (OK)
500		서버오류 (Internal Server Error )
404		서버가 요청한 페이지(Resource)를 찾을 수 없음 (Not Found)

request.POST.get('content')로 텍스트창에 입력한 내용을 읽을 수 있다, POST로 전송된 폼(form) 데이터 항목 중 content 값을 의미
redirect 함수는 페이지 이동을 위한 함수

스타일시트 파일은 장고의 static 디렉터리에 저장해야 한다. 
스태틱 디렉터리도 템플릿 디렉터리와 마찬가지로 config/settings.py 파일에 등록하여 사용한다.
- {% load static %} 먼저 삽입해야 탬플릿 태그 사용 가능

부트스트랩(Bootstrap)은 디자이너의 도움 없이도 개발자 혼자서 상당히 괜찮은 수준의 웹 페이지를 만들수 있게 도와주는 프레임워크
- bootstrap.min.css 파일을 카피하여 스태틱 디렉터리에 저장

어떤 웹 브라우저를 사용하더라도 웹 페이지가 동일하게 보이고 정상적으로 작동하게 하려면 반드시 웹 표준을 지키는 HTML 문서를 작성해야 한다.
- base.html 템플릿은 모든 템플릿이 상속해야 하는 템플릿으로 표준 HTML 문서의 기본 틀이된다
- 템플릿 상속하기 위해 {% extends 'base.html' %} 처럼 extends 템플릿 문법을 사용
- 템플릿 상속을 적용한 후 질문 목록, 질문 상세를 조회해 보자. 화면에 보여지는 것은 동일하지만 표준 HTML 구조로 변경된 것을 확인할 수 있다. 브라우저에서 소스보기 기능으로 생성된 HTML을 확인할 수 있다.

폼은 페이지 요청시 전달되는 파라미터들을 쉽게 관리하기 위해 사용하는 클래스
- 필수 파라미터의 값이 누락되지 않았는지, 파라미터의 형식은 적절한지 등을 검증할 목적으로 사용
- 이 외에도 HTML을 자동으로 생성하거나 폼에 연결된 모델을 이용하여 데이터를 저장하는 기능도 존재

- 장고의 폼은 일반 폼(forms.Form)과 모델 폼(forms.ModelForm)이 있는데 
-- 모델 폼은 모델(Model)과 연결된 폼으로, 폼을 저장하면 연결된 모델의 데이터를 저장할수 있는 폼이다. 
-- 모델 폼은 이너 클래스인 Meta 클래스가 반드시 필요하다. Meta 클래스에는 사용할 모델과 모델의 속성을 적어야 한다.
- render 함수에 전달한 {'form': form}은 템플릿에서 질문 등록시 사용할 폼 엘리먼트를 생성할 때 쓰인다.
-  form 태그에 action 속성을 지정하지 않으면 현재 페이지의 URL이 디폴트 action으로 설정된다.

request.POST에는 화면에서 사용자가 입력한 내용들이 담겨있다.
widgets 속성을 지정하면 subject, content 입력 필드에 form-control과 같은 부트스트랩 클래스를 추가할 수 있다.